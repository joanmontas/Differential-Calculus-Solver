# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "leftPLUSMINUSleftTIMESDIVIDErightPOWERrightUMINUSleftLPARENRPARENCONSTANT COS DIVIDE EULER FUNCTION LPAREN MINUS NUMBER PLUS POWER RPAREN SIN TAN TIMES VARIABLEexpression : group\n        | unary\n        | binary\n        | terminal\n        terminal : variable\n        | number\n        | constant\n        | functionvariable : VARIABLEnumber : NUMBERconstant : CONSTANTbinary : expression PLUS expression\n        | expression MINUS expression\n        | expression TIMES expression\n        | expression DIVIDE expression\n        | expression POWER expressionunary : MINUS expression %prec UMINUSgroup : LPAREN expression RPARENfunction : FUNCTION group"

_lr_action_items = {
    "LPAREN": (
        [
            0,
            6,
            7,
            15,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
        ],
    ),
    "MINUS": (
        [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            7,
            17,
            -1,
            -2,
            -3,
            -4,
            7,
            7,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            7,
            7,
            7,
            7,
            7,
            17,
            -17,
            -19,
            -12,
            -13,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
    "VARIABLE": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
        ],
    ),
    "NUMBER": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
        ],
    ),
    "CONSTANT": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
        ],
    ),
    "FUNCTION": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            0,
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            -17,
            -19,
            -12,
            -13,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
    "PLUS": (
        [
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            16,
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            16,
            -17,
            -19,
            -12,
            -13,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
    "TIMES": (
        [
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            18,
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            18,
            -17,
            -19,
            18,
            18,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
    "DIVIDE": (
        [
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            19,
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            19,
            -17,
            -19,
            19,
            19,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
    "POWER": (
        [
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            20,
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            20,
            -17,
            -19,
            20,
            20,
            20,
            20,
            20,
            -18,
        ],
    ),
    "RPAREN": (
        [
            2,
            3,
            4,
            5,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
        [
            -1,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            29,
            -17,
            -19,
            -12,
            -13,
            -14,
            -15,
            -16,
            -18,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "expression": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            1,
            21,
            22,
            24,
            25,
            26,
            27,
            28,
        ],
    ),
    "group": (
        [
            0,
            6,
            7,
            15,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            2,
            2,
            2,
            23,
            2,
            2,
            2,
            2,
            2,
        ],
    ),
    "unary": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
        ],
    ),
    "binary": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
        ],
    ),
    "terminal": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
        ],
    ),
    "variable": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
        ],
    ),
    "number": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
        ],
    ),
    "constant": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
        ],
    ),
    "function": (
        [
            0,
            6,
            7,
            16,
            17,
            18,
            19,
            20,
        ],
        [
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> expression", "S'", 1, None, None, None),
    (
        "expression -> group",
        "expression",
        1,
        "p_expression",
        "SyntacticAnalysis.py",
        39,
    ),
    (
        "expression -> unary",
        "expression",
        1,
        "p_expression",
        "SyntacticAnalysis.py",
        40,
    ),
    (
        "expression -> binary",
        "expression",
        1,
        "p_expression",
        "SyntacticAnalysis.py",
        41,
    ),
    (
        "expression -> terminal",
        "expression",
        1,
        "p_expression",
        "SyntacticAnalysis.py",
        42,
    ),
    ("terminal -> variable", "terminal", 1, "p_terminal", "SyntacticAnalysis.py", 48),
    ("terminal -> number", "terminal", 1, "p_terminal", "SyntacticAnalysis.py", 49),
    ("terminal -> constant", "terminal", 1, "p_terminal", "SyntacticAnalysis.py", 50),
    ("terminal -> function", "terminal", 1, "p_terminal", "SyntacticAnalysis.py", 51),
    ("variable -> VARIABLE", "variable", 1, "p_variable", "SyntacticAnalysis.py", 55),
    ("number -> NUMBER", "number", 1, "p_number", "SyntacticAnalysis.py", 59),
    ("constant -> CONSTANT", "constant", 1, "p_constant", "SyntacticAnalysis.py", 63),
    (
        "binary -> expression PLUS expression",
        "binary",
        3,
        "p_binary",
        "SyntacticAnalysis.py",
        72,
    ),
    (
        "binary -> expression MINUS expression",
        "binary",
        3,
        "p_binary",
        "SyntacticAnalysis.py",
        73,
    ),
    (
        "binary -> expression TIMES expression",
        "binary",
        3,
        "p_binary",
        "SyntacticAnalysis.py",
        74,
    ),
    (
        "binary -> expression DIVIDE expression",
        "binary",
        3,
        "p_binary",
        "SyntacticAnalysis.py",
        75,
    ),
    (
        "binary -> expression POWER expression",
        "binary",
        3,
        "p_binary",
        "SyntacticAnalysis.py",
        76,
    ),
    ("unary -> MINUS expression", "unary", 2, "p_unary", "SyntacticAnalysis.py", 93),
    (
        "group -> LPAREN expression RPAREN",
        "group",
        3,
        "p_group",
        "SyntacticAnalysis.py",
        99,
    ),
    (
        "function -> FUNCTION group",
        "function",
        2,
        "p_function",
        "SyntacticAnalysis.py",
        103,
    ),
]
